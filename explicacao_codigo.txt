# Projeto PjBL ‚Äì Machine Learning

Este projeto implementa os **4 experimentos principais** de classifica√ß√£o e regress√£o usando diferentes algoritmos de Machine Learning, conforme solicitado no PjBL da disciplina.

## üìÇ Estrutura dos Experimentos

O c√≥digo `pjbl.py` executa automaticamente os seguintes experimentos:

1. **Classifica√ß√£o Hold-out**
   - Split: 65% treino / 35% teste
   - Dataset: `student-mat.csv` ou `student-por.csv`
   - Alvo: `pass` (0 = Reprovado, 1 = Aprovado)
   - Modelos: 
     - KNN
     - Decision Tree
     - Naive Bayes
     - Logistic Regression
     - MLP (Rede Neural)
     - SVM
     - Random Forest
     - Bagging
     - Boosting
     - Gradient Boosting
     - Stacking
     - Blending
     - Ensemble simples

2. **Classifica√ß√£o Cross-Validation**
   - Protocolo: 5 folds estratificados
   - Mesmos datasets e modelos
   - M√©dia dos resultados em cada m√©trica

3. **Regress√£o Hold-out**
   - Split: 65% treino / 35% teste
   - Dataset: `winequality-red.csv` ou `winequality-white.csv`
   - Alvo: `quality` (nota de 0 a 10)
   - Modelos:
     - Linear Regression
     - KNN Regressor
     - Decision Tree Regressor
     - Ridge Regression
     - MLP Regressor
     - SVM Regressor
     - Random Forest Regressor
     - Bagging Regressor
     - Boosting Regressor
     - Gradient Boosting Regressor
     - Stacking Regressor
     - Blending Regressor
     - Ensemble simples

4. **Regress√£o Cross-Validation**
   - Protocolo: 5 folds
   - Mesmos datasets e modelos
   - M√©dia dos resultados

---

## üìä M√©tricas Calculadas

### Classifica√ß√£o
- **Acur√°cia**: propor√ß√£o de acertos totais  
- **F1-Score**: m√©dia harm√¥nica entre precis√£o e recall  
- **Precis√£o**: TP / (TP + FP)  
- **Sensibilidade (Recall)**: TP / (TP + FN)  
- **Especificidade**: TN / (TN + FP)  
  > Observa√ß√£o: s√≥ faz sentido em classifica√ß√£o bin√°ria.

### Regress√£o
- **R¬≤ (Coeficiente de Determina√ß√£o)**: propor√ß√£o da vari√¢ncia explicada  
- **MSE (Erro Quadr√°tico M√©dio)**  
- **RMSE (Raiz do Erro Quadr√°tico M√©dio)**  
- **MAE (Erro Absoluto M√©dio)**

---

## üíæ Sa√≠das

Ao rodar `pjbl.py`, s√£o gerados 4 arquivos CSV:

- `classificacao_holdout.csv`
- `classificacao_crossval.csv`
- `regressao_holdout.csv`
- `regressao_crossval.csv`

Cada CSV cont√©m os resultados das m√©tricas para todos os modelos.

---

## üé® Transformar CSV em Tabelas

O script `csv_to_tables.py` converte os CSVs em imagens PNG de tabelas formatadas, ideais para relat√≥rios e apresenta√ß√µes.

Exemplo de uso:
```bash
python csv_to_tables.py
```

Sa√≠das geradas:
- `classificacao_holdout.png`
- `classificacao_crossval.png`
- `regressao_holdout.png`
- `regressao_crossval.png`

---

## üöÄ Como rodar o projeto

1. Crie um ambiente virtual:
   ```bash
   python -m venv venv
   source venv/bin/activate
   ```

2. Instale as depend√™ncias:
   ```bash
   pip install pandas numpy scikit-learn matplotlib
   ```

3. Execute o script principal:
   ```bash
   python pjbl.py
   ```

4. (Opcional) Converta CSVs em tabelas:
   ```bash
   python csv_to_tables.py
   ```

---

‚úÖ Com isso, voc√™ ter√° os **4 experimentos completos**, resultados exportados em **CSV** e ainda tabelas visuais em **PNG** para usar no relat√≥rio final.
